@model PagedList.IPagedList<GoaQuickTrips.Apartment>
@using PagedList.Mvc;

<style type="text/css">
    .pull-right{
        margin-right:50px !important;
    }
    

        a:visited {
            color: #0254EB
        }

        a.morelink {
            text-decoration: none;
            outline: none;
        }

    .morecontent span {
        display: none;
    }

 

    #map {
        height: 150px;
        width: 200px;
        border:2px;
        border-color:darkblue;

    }
    table {
        page-break-inside: auto
    }

    tr {
        page-break-inside: avoid;
        page-break-after: auto
    }

    thead {
        display: table-header-group
    }

    tfoot {
        display: table-footer-group
    }

    .image {
        height: 150px;
        width: 300px;
    }
    .profile-sidebar {
        color: black;
        margin-top: 20px;
        padding: 30px;
        z-index: 80;
        background: rgba(116, 129, 131, 0.8);
        border-radius: 8px;
    }
    .profile-content {
        color: white;
        margin-top: 20px;
        padding: 30px;
        z-index: 80;
        background: rgba(116, 129, 131, 0.9);
        border-radius: 8px;
        // -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
        // box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    .prod_page{
        border:2px;
        border-color:cadetblue;
    }

    .pagination {
        margin:0px;
    }

</style>
<header>

</header>
<br />
<br />


<div class="container">
    <div class="row profile">
        <div class="col-md-3">
            <div class="profile-sidebar">
                <center>
                    <div id="map">

                    </div>
                    <br />
                    <input type="hidden" id="encodedString" name="encodedString" value="@ViewBag.encodedString" />
                    <table>
                        @using (Html.BeginForm((string)ViewBag.ReturnAction, "Home", FormMethod.Post))
                        {

                            <tbody>
                                <tr>
                                    <td> <input type="date" class="form-control input-md" name="check_in" id="check_in" placeholder="@(String.Format("{0:dd-MMM-yyyy}", DateTime.Parse(Session["in"].ToString())))" value="@(String.Format("{0:dd-MMM-yyyy}", DateTime.Parse(Session["in"].ToString())))"></td>
                                </tr>
                                <tr><td><input type="date" class="form-control  input-md" name="check_out" id="check_out" placeholder="@(String.Format("{0:dd-MMM-yyyy}", DateTime.Parse(Session["out"].ToString())))" value="@(String.Format("{0:dd-MMM-yyyy}", DateTime.Parse(Session["out"].ToString())))"></td></tr>
                                <tr>
                                    <td>

                                        <select name='guest' id="guest" class="form-control  input-md">
                                        @for(int i= 1; i<11;i++)
                                        {
                                            if (i == int.Parse(@Session["Guests"].ToString()))
                                            {
                                                <option selected="selected" value='@i'>@i person(s)</option> 
                                            }
                                            else
                                            {
                                                <option value='@i'>@i person(s)</option>
                                            }
                                        }
                                           
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td> <input type="submit" value="Search" class="btn btn-default input-sm" /></td>
                                </tr>
                            </tbody>

                        }
                    </table>
                   
                </center>
                


            </div>
        </div>
        <div class="col-md-9">
            <div class="profile-content">
                <h3> @((Model.Count() == 0) ? "We couldn't find any available apartments for these dates. Please search again." : "")</h3>



             @foreach (GoaQuickTrips.Apartment item in Model)
             { <div class="prod_page">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-12 col-xs-12 col-sm-12">
                                    <div class="col-md-4 col-sm-4 col-xs-12">
                                        <div class="product_item_view">
                                            @if (@item.Images.Count > 0)
                                            {
                                                <img src="/Images/@item.Images.First().Path" class="img-responsive" />
                                            }
                                        </div>
                                    </div>

                                    <div class="col-md-8 col-sm-8 col-xs-12">
                                        <div class="product_detail_view">
                                            <div class="pro_heading">
                                              <b><h3>
                                                  @Html.DisplayFor(modelItem => item.Name) at just Rs. 
                                                  @{ 
                                                      var cost = item.Prices.OrderByDescending(p => p.WEF).FirstOrDefault(p => (DateTime)p.WEF <= DateTime.Parse(Session["in"].ToString()));
                                                      var costprice = cost?.Price1 ?? 0;
                                                   }

                                                      @if(costprice == 0)
                                                      {
                                                          @:(Comming Soon!)
                                                      } else
                                                      {
                                                          @costprice
                                                      }
                                                  
                                                  </h3></b>
                                            </div>
                                            <div class="">
                                                No Of Guest:  @Html.DisplayFor(modelItem => item.NoOfGuests)
                                            </div>

                                            <div class="more">
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </div>
                                            <div class="more">
                                                 <strong>Notes:</strong> @Html.DisplayFor(modelItem => item.Notes)
                                            </div>
                                            <div class="more">
                                                <strong>Rules:</strong> @Html.DisplayFor(modelItem => item.Rules)
                                            </div>
                                            
                                            <div>
                                                @Html.ActionLink("Grab it Now", "ApartmentDetail", new { id = item.ApartmentID }, new { @class= "ButtonA pull-right" })
                                                @*@Html.ActionLink("Learn More", "ApartmentDetail", new { id = item.ApartmentID }, new { @class = "ButtonA" })*@
                                            </div>
                                          
                                        </div>
                                    </div>
                                  



                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <hr />
                    <br />
                    
                }
                 <center>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

        @Html.PagedListPager(Model, page => Url.Action("ApartmentsView",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, ApartmentID = ViewBag.ApartmentID }))
    </center>

            </div>
        </div>

        </div>
   
</div>

<script 
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAC6Yyjmk9tLMPEe6ID2rmzwcYPCHKYrZU">
</script>


        <script>
            $("document").ready(function ($) {

                //Initialize the Google Maps
                var geocoder;
                var map;
                var markersArray = [];
                var infos = [];

                geocoder = new google.maps.Geocoder();
                var myOptions = {
                    zoom: 9,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }
                //Load the Map into the map_canvas div
                var map = new google.maps.Map(document.getElementById("map"), myOptions);


                //Initialize a variable that the auto-size the map to whatever you are plotting
                var bounds = new google.maps.LatLngBounds();
                //Initialize the encoded string       
                var encodedString;
                //Initialize the array that will hold the contents of the split string
                var stringArray = [];
                //Get the value of the encoded string from the hidden input
                encodedString = document.getElementById("encodedString").value;
                //Split the encoded string into an array the separates each location
                stringArray = encodedString.split("****");

                var x;
                if (stringArray.l > 0) {
                    for (x = 0; x < stringArray.length; x = x + 1) {
                        var addressDetails = [];
                        var marker;
                        //Separate each field
                        addressDetails = stringArray[x].split("&&&");
                        //Load the lat, long data
                        var lat = new google.maps.LatLng(addressDetails[1], addressDetails[2]);
                        //Create a new marker and info window
                        marker = new google.maps.Marker({
                            map: map,
                            position: lat,

                            //Content is what will show up in the info window
                            content: addressDetails[0]
                        });
                        //Pushing the markers into an array so that it's easier to manage them
                        markersArray.push(marker);
                        google.maps.event.addListener(marker, 'click', function () {
                            closeInfos();
                            var info = new google.maps.InfoWindow({ content: this.content });

                            //On click the map will load the info window
                            info.open(map, this);
                            infos[0] = info;
                        });


                        //Extends the boundaries of the map to include this new location
                        bounds.extend(lat);
                    }
                }
                //Takes all the lat, longs in the bounds variable and autosizes the map
                map.fitBounds(bounds);

                //Manages the info windows
                function closeInfos() {
                    if (infos.length > 0) {
                        infos[0].set("marker", null);
                        infos[0].close();
                        infos.length = 0;
                    }
                }

            });

            $(document).ready(function () {
                var showChar = 150;
                var ellipsestext = "...";
                var moretext = "more";
                var lesstext = "less";
                $('.more').each(function () {
                    var content = $(this).html();

                    if (content.length > showChar) {

                        var c = content.substr(0, showChar);
                        var h = content.substr(showChar - 1, content.length - showChar);

                        var html = c + '<span class="moreellipses">' + ellipsestext + '&nbsp;</span><span class="morecontent"><span>' + h + '</span>&nbsp;&nbsp;<a href="" class="morelink">' + moretext + '</a></span>';

                        $(this).html(html);
                    }

                });

                $(".morelink").click(function () {
                    if ($(this).hasClass("more")) {
                        $(this).removeClass("more");

                        $(this).html(moretext);
                    } else {
                        $(this).addClass("less");
                        $(this).removeClass("less");
                        $(this).addClass("more");
                        $(this).html(lesstext);
                    }
                    $(this).parent().prev().toggle();
                    $(this).prev().toggle();
                    return false;
                });
                $('.truncate').each(function () {
                    var that = $(this),
                        title = that.text(),
                        chars = title.length;

                    if (chars > 33) {
                        var newTitle = title.substring(0, 100) + "...";
                        that.text(newTitle);
                    }
                });
            });

</script>
